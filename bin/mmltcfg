#!/bin/bash

# Mattermost Load Test Shell

# Copyright (c) 2024 Maxwell Power
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without
# restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom
# the Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE
# AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

# File: bin/mmltconfig

DEPLOYER_CONFIG_FILE="/mmlt/config/deployer.json"
COORDINATOR_CONFIG_FILE="/mmlt/config/coordinator.json"
LT_CONFIG_FILE="/mmlt/config/config.json"
BACKUP_DIR="/mmlt/config/backups"

# Function to create a backup of a configuration file
backup_config_file() {
  local config_file="$1"
  local backup_dir="$2"
  local timestamp=$(date +"%Y%m%d%H%M%S")
  mkdir -p "$backup_dir"
  cp "$config_file" "$backup_dir/$(basename $config_file).$timestamp"
}

# Function to prompt user for input with a default value
prompt() {
  local var_name="$1"
  local prompt_text="$2"
  local default_value="$3"
  read -p "$prompt_text [$default_value]: " input
  input="${input:-$default_value}"
  echo "$input"
}

# Function to fetch the latest LoadTest version
get_latest_loadtest_version() {
  echo $(curl -s https://api.github.com/repos/mattermost/mattermost-load-test-ng/releases/latest | jq -r .tag_name | sed 's/^v//')
}

# Function to configure deployer.json
configure_deployer_json() {
  echo "Configuring deployer.json..."

  backup_config_file "$DEPLOYER_CONFIG_FILE" "$BACKUP_DIR"

  AWSProfile=$(prompt "AWSProfile" "Enter AWS Profile" "mm-loadtest")
  AWSRegion=$(prompt "AWSRegion" "Enter AWS Region" "us-east-1")
  AWSAMI=$(prompt "AWSAMI" "Enter AWS AMI" "ami-003d3d03cfe1b0468")
  ClusterName=$(prompt "ClusterName" "Enter Cluster Name" "loadtest")
  AppInstanceCount=$(prompt "AppInstanceCount" "Enter App Instance Count" "1")
  AppInstanceType=$(prompt "AppInstanceType" "Enter App Instance Type" "c7i.xlarge")
  AgentInstanceCount=$(prompt "AgentInstanceCount" "Enter Agent Instance Count" "2")
  AgentInstanceType=$(prompt "AgentInstanceType" "Enter Agent Instance Type" "c7i.xlarge")
  EnableAgentFullLogs=$(prompt "EnableAgentFullLogs" "Enable Agent Full Logs? (true/false)" "true")
  ProxyInstanceType=$(prompt "ProxyInstanceType" "Enter Proxy Instance Type" "c7i.xlarge")
  SSHPublicKey=$(prompt "SSHPublicKey" "Enter SSH Public Key Path" "~/.ssh/id_rsa.pub")
  MattermostDownloadURL=$(prompt "MattermostDownloadURL" "Enter Mattermost Download URL" "https://latest.mattermost.com/mattermost-enterprise-linux")

  LATEST_VERSION=$(get_latest_loadtest_version)
  LoadTestDownloadURL=$(prompt "LoadTestDownloadURL" "Enter LoadTest Download URL" "https://github.com/mattermost/mattermost-load-test-ng/releases/download/v${LATEST_VERSION}/mattermost-load-test-ng-v${LATEST_VERSION}-linux-amd64.tar.gz")

  MattermostLicenseFile=$(prompt "MattermostLicenseFile" "Enter Mattermost License File Path" "")
  DBDumpURI=$(prompt "DBDumpURI" "Enter Database Dump URI" "")

  jq ".AWSProfile=\"$AWSProfile\" | \
      .AWSRegion=\"$AWSRegion\" | \
      .AWSAMI=\"$AWSAMI\" | \
      .ClusterName=\"$ClusterName\" | \
      .AppInstanceCount=$AppInstanceCount | \
      .AppInstanceType=\"$AppInstanceType\" | \
      .AgentInstanceCount=$AgentInstanceCount | \
      .AgentInstanceType=\"$AgentInstanceType\" | \
      .EnableAgentFullLogs=$EnableAgentFullLogs | \
      .ProxyInstanceType=\"$ProxyInstanceType\" | \
      .SSHPublicKey=\"$SSHPublicKey\" | \
      .MattermostDownloadURL=\"$MattermostDownloadURL\" | \
      .LoadTestDownloadURL=\"$LoadTestDownloadURL\" | \
      .MattermostLicenseFile=\"$MattermostLicenseFile\" | \
      .DBDumpURI=\"$DBDumpURI\"" \
      $DEPLOYER_CONFIG_FILE > /tmp/deployer.json.tmp && mv /tmp/deployer.json.tmp $DEPLOYER_CONFIG_FILE

  echo "deployer.json has been updated and backed up."
}

# Function to configure config.json
configure_lt_config_json() {
  echo "Configuring load test config.json..."

  backup_config_file "$LT_CONFIG_FILE" "$BACKUP_DIR"

  ServerURL=$(prompt "ServerURL" "Enter Mattermost Server URL" "http://localhost:8065")
  WebSocketURL=$(prompt "WebSocketURL" "Enter WebSocket URL" "ws://localhost:8065")
  AdminEmail=$(prompt "AdminEmail" "Enter Admin Email" "sysadmin@sample.mattermost.com")
  AdminPassword=$(prompt "AdminPassword" "Enter Admin Password" "Sys@dmin-sample1")
  MaxActiveUsers=$(prompt "MaxActiveUsers" "Enter Max Active Users" "2000")
  NumTeams=$(prompt "NumTeams" "Enter Number of Teams" "2")
  NumChannels=$(prompt "NumChannels" "Enter Number of Channels" "10")
  NumPosts=$(prompt "NumPosts" "Enter Number of Posts" "0")
  PercentPublicChannels=$(prompt "PercentPublicChannels" "Enter Percent of Public Channels" "0.2")
  PercentPrivateChannels=$(prompt "PercentPrivateChannels" "Enter Percent of Private Channels" "0.1")
  PercentDirectChannels=$(prompt "PercentDirectChannels" "Enter Percent of Direct Channels" "0.6")

  jq ".ConnectionConfiguration.ServerURL=\"$ServerURL\" | \
      .ConnectionConfiguration.WebSocketURL=\"$WebSocketURL\" | \
      .ConnectionConfiguration.AdminEmail=\"$AdminEmail\" | \
      .ConnectionConfiguration.AdminPassword=\"$AdminPassword\" | \
      .UsersConfiguration.MaxActiveUsers=$MaxActiveUsers | \
      .InstanceConfiguration.NumTeams=$NumTeams | \
      .InstanceConfiguration.NumChannels=$NumChannels | \
      .InstanceConfiguration.NumPosts=$NumPosts | \
      .InstanceConfiguration.PercentPublicChannels=$PercentPublicChannels | \
      .InstanceConfiguration.PercentPrivateChannels=$PercentPrivateChannels | \
      .InstanceConfiguration.PercentDirectChannels=$PercentDirectChannels" \
      $LT_CONFIG_FILE > /tmp/config.json.tmp && mv /tmp/config.json.tmp $LT_CONFIG_FILE

  echo "config.json has been updated and backed up."
}

# Function to configure coordinator.json
configure_coordinator_json() {
  echo "Configuring coordinator.json..."

  backup_config_file "$COORDINATOR_CONFIG_FILE" "$BACKUP_DIR"

  PrometheusURL=$(prompt "PrometheusURL" "Enter Prometheus URL" "http://localhost:9090")
  MaxActiveUsers=$(prompt "MaxActiveUsers" "Enter Max Active Users" "2000")
  NumUsersInc=$(prompt "NumUsersInc" "Enter Number of Users to Increase" "8")
  NumUsersDec=$(prompt "NumUsersDec" "Enter Number of Users to Decrease" "8")
  RestTimeSec=$(prompt "RestTimeSec" "Enter Rest Time in Seconds" "2")

  jq ".ClusterConfig.MaxActiveUsers=$MaxActiveUsers | \
      .MonitorConfig.PrometheusURL=\"$PrometheusURL\" | \
      .NumUsersInc=$NumUsersInc | \
      .NumUsersDec=$NumUsersDec | \
      .RestTimeSec=$RestTimeSec" \
      $COORDINATOR_CONFIG_FILE > /tmp/coordinator.json.tmp && mv /tmp/coordinator.json.tmp $COORDINATOR_CONFIG_FILE

  echo "coordinator.json has been updated and backed up."
}

# Call the configuration functions
configure_deployer_json
configure_lt_config_json
configure_coordinator_json

echo "All configuration files have been updated and backups created."
