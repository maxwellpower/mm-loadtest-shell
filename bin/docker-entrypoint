#!/bin/bash

# Mattermost Load Test Shell

# Copyright (c) 2024 Maxwell Power
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without
# restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom
# the Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE
# AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

# File: bin/docker-entrypoint

function _sshAgent {
    echo "[INFO]: Adding SSH key to the agent..."

    # Check if ssh-agent is running
    if [ -z "$(pgrep ssh-agent)" ]; then
        echo "[INFO]: Starting ssh-agent..."
        eval $(ssh-agent -s)
    else
        echo "[WARN]: ssh-agent is already running..."
    fi

    # Check if the SSH key already exists in /mmlt/config
    if [ -f /mmlt/config/ssh/id_rsa ] && [ -f /mmlt/config/ssh/id_rsa.pub ]; then
        echo "[INFO]: Found existing SSH key in /mmlt/config. Adding to ssh-agent..."
        ssh-add /mmlt/config/ssh/id_rsa
        echo "[INFO]: Restoring SSH keys from /mmlt/config/ssh"
        cp -f /mmlt/config/ssh/id_rsa /mmlt/config/ssh/id_rsa.pub /root/.ssh/
    else
        echo "[WARN]: No SSH key found in /mmlt/config. Using default key from /root/.ssh/"
        mkdir -p /mmlt/config/ssh
        cp /root/.ssh/id_rsa /root/.ssh/id_rsa.pub /mmlt/config/ssh/
        ssh-add /mmlt/config/ssh/id_rsa
        echo "[INFO]: SSH key copied to /mmlt/config/ssh and added to agent"
    fi
}

function _checkConfig {
    echo "[INFO]: Checking the configuration ..."
    if [ ! -f /mmlt/config/deployer.json ]; then
        export MMLT_NEW_CONFIG=true
        echo "[WARN]: Deployer configuration file not found. Copying ..."
        cp /mmlt/config.default/deployer.sample.json /mmlt/config/deployer.json
    else
        echo "[INFO]: Deployer configuration file found."
    fi

    if [ ! -f /mmlt/config/config.json ]; then
        echo "[WARN]: Config configuration file not found. Copying..."
        cp /mmlt/config.default/config.sample.json /mmlt/config/config.json
    else
        echo "[INFO]: Load test config.json found."
    fi

    if [ ! -f /mmlt/config/coordinator.json ]; then
        echo "[WARN]: Coordinator configuration file not found. Copying..."
        cp /mmlt/config.default/coordinator.sample.json /mmlt/config/coordinator.json
    else
        echo "[INFO]: Coordinator config file found."
    fi
}

function _checkTerraform {
    TERRAFORM_VERSION=$(terraform -v | head -n 1 | awk '{print $2}' | sed 's/^v//') && export TERRAFORM_VERSION
    if [ $TERRAFORM_VERSION ]; then
        echo "[INFO]: Terraform Version $TERRAFORM_VERSION installed."
    else
        echo "[ERROR]: Terraform not found!"
        exit 1
    fi
}

function _checkAWS {
    echo "[INFO]: Setting AWS Variables ..."
    export AWS_SHARED_CREDENTIALS_FILE=/mmlt/config/credentials
    export AWS_PROFILE=mm-loadtest

    echo "[INFO]: Checking AWS Credentials ..."
    if [ -f /mmlt/config/credentials ]; then
        echo "[INFO]: Credentials file found. Using the credentials file."
        export MMLT_AWS_CREDENTIALS=true
        AWS_USERNAME=$(aws sts get-caller-identity --query "Arn" --output text 2>/dev/null | cut -d '/' -f 2)
        if [ $? -eq 0 ]; then
            echo "[INFO]: AWS Username: $AWS_USERNAME"
        else
            echo "[ERROR]: Unable to fetch AWS username. Please check credentials."
            exit 1
        fi
    else
        echo "[WARN]: No credentials found. Please provide a credentials file in /mmlt/config."
        export MMLT_AWS_CREDENTIALS=false
    fi
}

function _checkLicense {
    echo "[INFO]: Checking for a license file ..."
    if [ -f /mmlt/config/license ]; then
        echo "[INFO]: License file found."
        export MMLT_LICENSE=true
    else
        echo "[WARN]: No license found. Please provide a license file in /mmlt/config."
        export MMLT_LICENSE=false
    fi
}

function _systemSetup {
    echo "[INFO]: Updating PATH ..."
    export PATH="$PATH:/mmlt/bin"
}

function _check_and_copy_terraform_state {
    local terraform_state_dir="/var/lib/mattermost-load-test-ng"
    local assets_dir="/mmlt/deployment/terraform/assets"

    echo "[INFO]: Checking Terraform state files in ${terraform_state_dir}..."

    declare -a terraform_files=("outputs.tf" "variables.tf" "cluster.tf" "elasticsearch.tf" 
                                "datasource.yaml" "dashboard.yaml" 
                                "coordinator_dashboard_tmpl.json" 
                                "es_dashboard_data.json" "redis_dashboard_data.json" 
                                "saml-idp.crt" "dashboard_data.json")

    # Iterate through the files and check if they exist
    for file in "${terraform_files[@]}"; do
        if [ ! -f "${terraform_state_dir}/${file}" ]; then
            if ! cp "${assets_dir}/${file}" "${terraform_state_dir}/"; then
                echo "[ERROR]: Failed to copy ${file} from ${assets_dir}. Please verify the file exists."
            fi
            echo "[INFO]: Copied Terraform Asset Files."
        fi
    done

    # Check if the "provisioners" directory exists
    if [ ! -d "${terraform_state_dir}/provisioners" ]; then
        if cp -r "${assets_dir}/provisioners" "${terraform_state_dir}/"; then
            echo "[INFO]: 'provisioners' directory copied successfully."
        else
            echo "[ERROR]: Failed to copy 'provisioners' directory from ${assets_dir}. Please verify it exists."
        fi
    fi
}

echo "[INFO]: Initializing Load Test Shell v$MMLT_SHELL_VERSION ..."
_sshAgent
_checkConfig
_checkTerraform
_checkAWS
_checkLicense
_systemSetup
_check_and_copy_terraform_state
echo "[INFO]: Setup Complete. Starting Shell ..."

# Pass control to the CMD
exec "$@"
